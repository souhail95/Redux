{"version":3,"sources":["app/todoSlice.js","components/AddTodoForm.js","components/TodoItem.js","components/TodoList.js","components/TotalItems.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["arr","id","description","isDone","todoSlice","createSlice","name","initialState","reducers","addTodo","state","action","newTodo","length","payload","push","toggleComplete","index","findIndex","todo","deleteTodo","filter","filterdone","filternotdone","filter1","updatetodo","actions","filterData","AddTodoForm","todos","useSelector","useState","value","setValue","searchText","setSearchText","console","log","dispatch","useDispatch","localStorage","setItem","type","onClick","e","handleChange","target","className","onSubmit","event","preventDefault","charAt","style","display","justifyContent","placeholder","onChange","marginBottom","TodoItem","editable","setEditable","setName","color","checked","marginRight","marginRightt","marginLeft","TodoList","backgroundColor","map","TotalItems","completedTodos","App","height","configureStore","reducer","todoReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oPAEIA,EAAK,CACL,CAAEC,GAAI,EAAGC,YAAa,kBAAmBC,QAAQ,GACjD,CAAEF,GAAI,EAAGC,YAAa,mBAAoBC,QAAQ,GAClD,CAAEF,GAAI,EAAGC,YAAa,kBAAmBC,QAAQ,GACjD,CAAEF,GAAI,EAAGC,YAAa,mBAAoBC,QAAQ,GAClD,CAAEF,GAAI,EAAGC,YAAa,kBAAmBC,QAAQ,IAE/CC,EAAYC,YAAY,CAC1BC,KAAK,QACLC,aAAc,CACV,CAAEN,GAAI,EAAGC,YAAa,kBAAmBC,QAAQ,GACjD,CAAEF,GAAI,EAAGC,YAAa,mBAAoBC,QAAQ,GAClD,CAAEF,GAAI,EAAGC,YAAa,kBAAmBC,QAAQ,GACjD,CAAEF,GAAI,EAAGC,YAAa,mBAAoBC,QAAQ,GAClD,CAAEF,GAAI,EAAGC,YAAa,kBAAmBC,QAAQ,IAIrDK,SAAU,CACNC,QAAS,SAACC,EAAMC,GACZ,IAAMC,EAAU,CACZX,GAAIS,EAAMA,EAAMG,OAAO,GAAGZ,GAAG,EAC7BC,YAAaS,EAAOG,QAAQZ,YAC5BC,QAAQ,GAEZO,EAAMK,KAAKH,IAGfI,eAAgB,SAACN,EAAOC,GACpB,IAAMM,EAAQP,EAAMQ,WAChB,SAACC,GAAD,OAAUA,EAAKlB,KAAOU,EAAOG,QAAQb,MAEzCS,EAAMO,GAAOd,OAASQ,EAAOG,QAAQX,QAIzCiB,WAAY,SAACV,EAAOC,GAEf,OAAOD,EAAMW,QAAO,SAACF,GAAD,OAAUA,EAAKlB,KAAOU,EAAOG,QAAQb,OAG9DqB,WAAY,SAACZ,EAAOC,GAEhB,OAAOD,EAAMW,QAAO,SAACF,GAAD,OAA0B,IAAhBA,EAAKhB,WAEvCoB,cAAe,SAACb,EAAOC,GAEnB,OAAOD,EAAMW,QAAO,SAACF,GAAD,OAA0B,IAAhBA,EAAKhB,WAEvCqB,QAAS,SAACd,EAAOC,GACjB,OAAOX,GAIPyB,WAAY,SAACf,EAAOC,GAChB,IAAMM,EAAQP,EAAMQ,WAChB,SAACC,GAAD,OAAUA,EAAKlB,KAAOU,EAAOG,QAAQb,MAEzCS,EAAMO,GAAOf,YAAcS,EAAOG,QAAQR,SAM/C,EAAkHF,EAAUsB,QAApHjB,EAAR,EAAQA,QAASO,EAAjB,EAAiBA,eAAgBI,EAAjC,EAAiCA,WAAoBE,GAArD,EAA6CD,OAA7C,EAAqDC,YAAYC,EAAjE,EAAiEA,cAAcE,EAA/E,EAA+EA,WAAwBD,GAAvG,EAA0FG,WAA1F,EAAuGH,SAE/FpB,IAAf,Q,OCLewB,EAzDK,SAAC,GAAa,EAAZzB,OAAa,IACzB0B,EAAQC,aAAY,SAACpB,GAAD,OAAWA,EAAMmB,SAC3C,EAA0BE,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAIAC,QAAQC,IAAIR,GACZ,IAAMS,EAAWC,cACjBC,aAAaC,QAAQ,QAAQT,GAuB7B,OACI,gCACY,8BACI,wBACAU,KAAK,OACLV,MAAOE,EACPS,QAAS,SAAAC,GAAC,OA5BT,SAAAZ,GACfG,EAAcH,GACdM,EAASd,EAAQQ,IA0BWa,CAAaD,EAAEE,OAAOd,QACpCe,UAAU,kBAJV,qBAOhB,uBAAMA,UAAU,cAAcC,SA1BjB,SAACC,GACdA,EAAMC,iBAEkB,MAAnBlB,EAAMmB,OAAO,IAA+B,IAAjBnB,EAAMnB,QAAiBmB,EAAMnB,OAAS,MAGrEuB,QAAQC,IAAI,gBAAkBL,GAC/BM,EACI7B,EAAQ,CACJP,YAAa8B,OAiBrB,UACC,uBAAOe,UAAU,UAAUK,MAAO,CAACC,QAAQ,OAAOC,eAAe,UAAjE,yBACA,uBACAZ,KAAK,OACLa,YAAY,cACZR,UAAU,4BACVf,MAAOA,EACPwB,SAAU,SAACP,GAAD,OAAWhB,EAASgB,EAAMH,OAAOd,UAE3C,qBAAKoB,MAAO,CAACC,QAAQ,OAAOC,eAAe,SAASG,aAAa,MAAjE,SAAwE,wBAAQV,UAAU,kBAAkBL,KAAK,SAASU,MAAO,CAACC,QAAQ,OAAOC,eAAe,UAAxF,6BCflEI,EApCE,SAAC,GAAgC,IAA9BzD,EAA6B,EAA7BA,GAAIC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,OAC3BmC,EAAUC,cAChB,EAAgCR,oBAAS,GAAzC,mBAAO4B,EAAP,KAAiBC,EAAjB,KACA,EAAuB7B,mBAAS7B,GAAhC,mBAAOI,EAAP,KAAYuD,EAAZ,KAYA,OACI,qBAAKT,MAAO,CAACU,MAAO,iBAApB,SAEA,qBAAKV,MAAO,CAACU,MAAO,iBAApB,SACA,oBAAIf,UAAU,kBAAd,SACI,sBAAKA,UAAU,iCAAf,UACI,uBAAMA,UAAU,4BAAhB,UACI,uBAAOL,KAAK,WAAWK,UAAU,OAAOgB,QAAS5D,EAASiD,MAAO,CAACY,YAAY,OAASR,SAlB3E,WACxBlB,EAAStB,EAAe,CAACf,GAAIA,EAAIE,QAASA,QAkB7BF,KACD,iCAAO0D,EAAW,uBAAOjB,KAAK,OAASK,UAAU,OAAQf,MAAO1B,EAAQkD,SAAU,SAACZ,GAAD,OAAOiB,EAAQjB,EAAEE,OAAOd,UAAe9B,EAAzH,OACJ,gCACA,wBAAQyC,QAAS,WAA+B,MAAlBrC,EAAK6C,OAAO,IAA8B,IAAhB7C,EAAKO,QAAiBP,EAAKO,OAAS,KAAQyB,EAASb,EAAW,CAAExB,GAAIA,EAAIK,KAAMJ,KAAiB0D,GAAaD,KAAkBrB,EAASb,EAAW,CAAExB,GAAIA,EAAIK,KAAMA,KAAUsD,GAAaD,KAAcP,MAAO,CAACa,aAAa,OAASlB,UAAU,kBAAzS,SAA4TY,EAAS,SAAS,SAC9U,wBAAQhB,QAlBM,WACtBL,EAASlB,EAAW,CAACnB,GAAIA,MAiBmB8C,UAAU,kBAAkBK,MAAO,CAACc,WAAW,OAAnF,iCCUDC,EArCE,SAAC,GAA+B,EAA7BlE,GAA6B,EAAzBC,YAA0B,IAAbC,EAAY,EAAZA,OAC3B0B,EAAQC,aAAY,SAACpB,GAAD,OAAWA,EAAMmB,SACrCS,EAAWC,cAmBd,OACI,sBAAKa,MAAO,CAACK,aAAa,KAAOK,MAAO,iBAAxC,UACA,oBAAIV,MAAO,CAACC,QAAQ,OAAOC,eAAe,UAA1C,iDACA,sBAAKF,MAAO,CAACC,QAAQ,OAAOC,eAAe,gBAAgBG,aAAa,KAAMK,MAAO,iBAArF,UACA,wBAAQnB,QATiB,WAExBL,EAASf,EAAc,CAACpB,OAAQA,MAOK4C,UAAU,kBAAhD,sBACA,wBAAQJ,QAdc,WAErBL,EAAShB,EAAW,CAACnB,OAAQA,MAYK4C,UAAU,kBAA7C,uBAEA,oBAAIA,UAAU,aAAaK,MAAO,CAACgB,gBAAiB,iBAApD,SACKvC,EAAMwC,KAAI,SAAClD,GAAD,OACP,cAAC,EAAD,CAAWlB,GAAIkB,EAAKlB,GAAMC,YAAaiB,EAAKjB,YAAaC,OAAQgB,EAAKhB,kBCxB1EmE,EARI,WACf,IAAMC,EAAiBzC,aAAY,SAACpB,GAAD,OAAWA,EAAMmB,MAAMR,QAAO,SAACF,GAAD,OAA0B,IAAhBA,EAAKhB,aAE/E,OACI,qBAAI4C,UAAU,OAAd,0BAAoCwB,EAAe1D,W,MCgB7C2D,MAhBf,WACE,OACE,sBAAKzB,UAAU,OAAOK,MAAO,CAACgB,gBAAiB,iBAA/C,UACA,wBAAQhB,MAAO,CAACK,aAAa,QAASV,UAAU,SAChD,sBAAKA,UAAU,8BAA8BK,MAAO,CAACK,aAAa,OAAOgB,OAAO,OAAQX,MAAO,iBAA/F,UACG,oBAAIV,MAAO,CAACC,QAAQ,OAAOC,eAAe,UAA1C,0BACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,qBAAKF,MAAO,CAACC,QAAQ,OAAOC,eAAe,UAA3C,SAAsD,cAAC,EAAD,SAEzD,qBAAKF,MAAO,CAACgB,gBAAiB,gBAAgBK,OAAO,WACrD,wBAAQ1B,UAAU,cChBP2B,cAAe,CAC1BC,QAAQ,CACJ9C,MAAO+C,KCOKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.59841797.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nlet arr =[\r\n    { id: 1, description: 'first todo item', isDone: false},\r\n    { id: 2, description: 'second todo item', isDone: false},\r\n    { id: 3, description: 'third todo item', isDone: false},\r\n    { id: 4, description: 'fourth todo item', isDone: false},\r\n    { id: 5, description: 'fifth todo item', isDone: false},\r\n];\r\nconst todoSlice = createSlice({\r\n    name:'todos',\r\n    initialState: [\r\n        { id: 1, description: 'first todo item', isDone: false},\r\n        { id: 2, description: 'second todo item', isDone: false},\r\n        { id: 3, description: 'third todo item', isDone: false},\r\n        { id: 4, description: 'fourth todo item', isDone: false},\r\n        { id: 5, description: 'fifth todo item', isDone: false},\r\n    ],\r\n\r\n    \r\n    reducers: {\r\n        addTodo: (state,action) => {\r\n            const newTodo = {\r\n                id: state[state.length-1].id+1,\r\n                description: action.payload.description,\r\n                isDone: false,\r\n            };\r\n            state.push(newTodo);\r\n            \r\n        },\r\n        toggleComplete: (state, action) => {\r\n            const index = state.findIndex(\r\n                (todo) => todo.id === action.payload.id\r\n            );\r\n            state[index].isDone = action.payload.isDone;\r\n            \r\n \r\n        },\r\n        deleteTodo: (state, action) => {\r\n             \r\n             return state.filter((todo) => todo.id !== action.payload.id);\r\n             \r\n        },\r\n        filterdone: (state, action) => {\r\n            \r\n            return state.filter((todo) => todo.isDone === true);\r\n        },\r\n        filternotdone: (state, action) => {\r\n           \r\n            return state.filter((todo) => todo.isDone === false);     \r\n       },\r\n        filter1: (state, action) => {\r\n        return(arr);\r\n        },\r\n\r\n        \r\n        updatetodo: (state, action) => {\r\n            const index = state.findIndex(\r\n                (todo) => todo.id === action.payload.id\r\n            );\r\n            state[index].description = action.payload.name;\r\n            \r\n        }\r\n    },\r\n});\r\n\r\nexport const { addTodo, toggleComplete, deleteTodo ,filter ,filterdone, filternotdone,updatetodo,filterData , filter1} = todoSlice.actions;\r\n\r\nexport default todoSlice.reducer;","import React , { useState } from 'react'\r\nimport { useSelector,useDispatch } from 'react-redux';\r\nimport { addTodo,filter1 } from '../app/todoSlice';\r\n \r\n\r\n\r\nconst AddTodoForm = ({isDone}) => {\r\n    const todos = useSelector((state) => state.todos);\r\n    const [value, setValue] = useState('');\r\n    const [searchText, setSearchText] = useState(\"\");\r\n \r\n    \r\n   /* const [data1, setData1] = useState(todos);*/\r\n    console.log(todos);\r\n    const dispatch = useDispatch();\r\n    localStorage.setItem('text4',value);\r\n    const handleChange = value   => {\r\n          setSearchText(value);\r\n          dispatch(filter1(value ));\r\n    };\r\n   \r\n   \r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n        \r\n        if  (value.charAt(0) ===' ' ||  value.length === 0  || value.length > 100  ) \r\n        {return}\r\n        else\r\n        {console.log('user entered:' + value);\r\n        dispatch(\r\n            addTodo({\r\n                description: value,\r\n            })\r\n        );}\r\n       \r\n    };\r\n\r\n\r\n    return(\r\n        <div>\r\n                    <div>\r\n                        <button  \r\n                        type=\"text\"\r\n                        value={searchText}\r\n                        onClick={e => handleChange(e.target.value)}\r\n                        className=\"btn btn-primary\"\r\n                        >Reset</button>\r\n                    </div>   \r\n        <form className='form-inline' onSubmit={onSubmit}>\r\n         <label className='sr-only' style={{display:'flex',justifyContent:'center'}} >Description</label>\r\n         <input\r\n         type='text'\r\n         placeholder='add todo...'\r\n         className='form-control mb-2 mr-sm-2'\r\n         value={value}\r\n         onChange={(event) => setValue(event.target.value)}\r\n         ></input>\r\n         <div style={{display:'flex',justifyContent:'center',marginBottom:'1%'}}><button className='btn btn-primary' type='submit' style={{display:'flex',justifyContent:'center'}}>Submit</button></div>\r\n        </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddTodoForm;","import React,{useState} from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport  { toggleComplete, deleteTodo,updatetodo} from '../app/todoSlice'\r\n\r\n\r\n\r\nconst TodoItem = ({ id, description, isDone}) => {\r\n    const dispatch =useDispatch();\r\n    const [editable, setEditable] = useState(false);\r\n    const [name,setName] = useState(description);\r\n    const handleCompleteClick = () => {\r\n        dispatch(toggleComplete({id: id, isDone: !isDone }))\r\n        \r\n        \r\n    };\r\n    const handleDeleteClick = () =>{\r\n        dispatch(deleteTodo({id: id}))\r\n    };\r\n\r\n\r\n\r\n    return(\r\n        <div style={{color: \"rgb(1, 1, 82)\" }}>\r\n\r\n        <div style={{color: \"rgb(1, 1, 82)\" }}>\r\n        <li className='list-group-item'>\r\n            <div className='d-flex justify-content-between'>\r\n                <span className='d-flex align-items-center'>\r\n                    <input type='checkbox' className='mr-3' checked={isDone } style={{marginRight:\"3px\" }} onChange={handleCompleteClick} />\r\n                    {id}</span>\r\n                    <span>{editable ? <input type=\"text\"   className='mr-3'  value={name}   onChange={(e) => setName(e.target.value)}   /> : description } </span>\r\n                <div >\r\n                <button onClick={() => { if  (name.charAt(0) ===' ' ||  name.length === 0  || name.length > 100  ) {dispatch(updatetodo({ id: id, name: description })); setEditable(!editable);} else {dispatch(updatetodo({ id: id, name: name })); setEditable(!editable); }}}style={{marginRightt:\"3px\" }} className=\"btn btn-primary\">{editable?\"Update\":\"Edit\"}</button>\r\n                <button onClick={handleDeleteClick} className='btn btn-primary' style={{marginLeft:\"3px\" }} >Delete</button>\r\n                </div>\r\n            </div>\r\n        </li>\r\n        </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoItem;","import React from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport { useSelector , useDispatch} from 'react-redux';\r\nimport { filterdone, filternotdone} from '../app/todoSlice'\r\n\r\n\r\nconst TodoList = ({ id, description, isDone}) => {\r\n    const todos = useSelector((state) => state.todos);\r\n    const dispatch = useDispatch();\r\n    \r\n      /*const todos = [\r\n          { id: 1, description: 'first todo item', isDone: 'not'},\r\n          { id: 2, description: 'second todo item', isDone: 'not'},\r\n          { id: 3, description: 'third todo item', isDone: 'done'},\r\n          { id: 4, description: 'fourth todo item', isDone: 'not'},\r\n          { id: 5, description: 'fifth todo item', isDone: 'not'},\r\n      ];*/\r\n\r\n        const handlefilterdone = () =>{\r\n            \r\n            dispatch(filterdone({isDone: isDone}))\r\n        };\r\n        const handlefilternotdone = () =>{\r\n            \r\n            dispatch(filternotdone({isDone: isDone}))\r\n        };\r\n        \r\n       return (\r\n           <div style={{marginBottom:\"2%\" , color: \"rgb(1, 1, 82)\" }}>         \r\n           <h1 style={{display:'flex',justifyContent:'center'}}>Filtering according Done / Not done</h1>\r\n           <div style={{display:'flex',justifyContent:'space-between',marginBottom:\"2%\", color: \"rgb(1, 1, 82)\"}}>\r\n           <button onClick={handlefilternotdone} className='btn btn-primary'>Not done</button>   \r\n           <button onClick={handlefilterdone} className='btn btn-primary' > Done </button>\r\n           </div > \r\n           <ul className='list-group' style={{backgroundColor: \"rgb(1, 1, 82)\" }}>\r\n               {todos.map((todo) => (\r\n                   <TodoItem  id={todo.id}   description={todo.description} isDone={todo.isDone} />\r\n               ))}\r\n           </ul>\r\n           </div>\r\n       );\r\n};\r\n\r\nexport default TodoList;","import React from 'react'\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\nconst TotalItems = () => {\r\n    const completedTodos = useSelector((state) => state.todos.filter((todo) => todo.isDone === true));\r\n\r\n     return(\r\n         <h4 className='mt-3' >Totalitems : {completedTodos.length}</h4>\r\n     );\r\n};\r\n\r\nexport default TotalItems;","import React from 'react';\nimport './App.css';\nimport AddTodoForm  from './components/AddTodoForm';\nimport TodoList from './components/TodoList';\nimport TotalItems from './components/TotalItems';\nimport './bootstrap.min.css'\n\n\nfunction App() {\n  return (\n    <div className='box1' style={{backgroundColor: \"rgb(1, 1, 82)\"}}>\n    <header style={{marginBottom:\"4.5%\"}} className=\"box9\"></header>\n    <div className=\"container bg-white p-4 mt-5\" style={{marginBottom:\"4.5%\",height:\"200%\" ,color: \"rgb(1, 1, 82)\"}}>\n       <h1 style={{display:'flex',justifyContent:'center'}}>My Todo List</h1>\n       <AddTodoForm />\n       <TodoList />\n       <div style={{display:'flex',justifyContent:'center'}}><TotalItems /></div>\n    </div>\n    <div style={{backgroundColor: \"rgb(1, 1, 82)\",height:'300px'}}></div>\n    <footer className=\"box10\" ></footer>\n    </div>\n  );\n}\n\nexport default App;\n","import {configureStore} from '@reduxjs/toolkit';\nimport todoReducer from './todoSlice';\n\nexport default configureStore({\n    reducer:{\n        todos: todoReducer,\n    },\n});","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport  store  from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}